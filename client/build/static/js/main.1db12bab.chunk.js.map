{"version":3,"sources":["components/ErrorForm.tsx","redux/dashboard/actionCreators.ts","redux/dashboard/actionTypes.ts","redux/washingMachines/actionCreators.ts","redux/washingMachines/actionTypes.ts","utils/checkStatus.ts","redux/washingMachines/thunksActionFunctions.ts","components/ModalErrorBlock.tsx","hooks/useErrorForm.ts","components/EditForm.tsx","hooks/useMainForm.ts","utils/dateConverter.ts","components/ModalDeleteBlock.tsx","redux/washingMachines/reducer.ts","redux/dashboard/reducer.ts","redux/rootReducer.ts","redux/store.ts","utils/validation.ts","components/DashboardCard.tsx","components/AddForm.tsx","components/ModalAddBlock.tsx","pages/Home.tsx","App.tsx","index.tsx"],"names":["ErrorForm","classes","errorState","changeErrorState","handleClickAddError","TextField","margin","label","type","name","value","code","onChange","e","className","errorCodeInput","errorText","errorTextInput","formBtn","variant","color","style","onClick","showErrorAlert","message","payload","hideErrorAlert","hideFailedAlert","hideSuccessAlert","deleteMachine","serialNumber","deleteMachinesByModel","model","updateMachineStatus","status","data","updateMachineErrorList","searching","input","checkStatus","dispatch","showFailedAlert","showSuccessAlert","headers","fetchAllMachines","a","isLoading","fetch","response","json","result","fetchUpdateMachine","updates","currentSerialNumber","method","body","JSON","stringify","fetchMachinesByStatus","machineState","ModalErrorBlock","errors","visible","onClose","useDispatch","initialState","React","useState","state","setState","element","target","useErrorForm","errorInputs","setErrorInputs","open","aria-labelledby","fullWidth","id","dialogTitle","aria-label","fontSize","minWidth","dividers","length","listOfErrors","map","error","key","uuidv4","ListItem","ListItemText","marginBottom","errorList","fetchUpdateErrorList","EditForm","dataState","changeDataState","validation","Boolean","helperText","washingCycles","InputLabelProps","shrink","dateOfManufacture","useMainForm","date","includes","split","reverse","join","ModalDeleteBlock","fetchDeleteMachine","fetchDeleteMachinesByModel","washingMachines","searchingMachines","washingMachineReducer","action","filter","machine","_id","historyOfErrors","push","regex","RegExp","toString","search","failed","success","loading","dashboardReducer","rootReducer","combineReducers","washingMachine","dashboard","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","typedUseSelector","useSelector","store","createStore","applyMiddleware","thunk","machineCandidate","getState","find","DashboardCard","setVisible","editState","setEditState","validationError","setValidationError","editFormValues","setEditFormValues","handleClickOpenModal","handleClickCloseModal","undefined","item","xs","card","media","image","position","IconButton","editBtn","prevSate","prevState","isValid","deleteBtn","component","modelText","primaryField","classNames","statusField","statusState","statusWorking","statusError","bottomBtns","changeStatusBtn","AddForm","isNaN","placeholder","marginTop","FormLabel","RadioGroup","FormControlLabel","control","Radio","ModalAddBlock","NaN","setDataState","validationSerialNumber","setValidationSerialNumber","convertDateReverse","useHomeStyles","makeStyles","height","paddingTop","minHeight","top","left","textAlign","width","textShadow","fontWeight","display","justifyContent","alignItems","marginLeft","marginRight","backgroundColor","maxHeight","overflow","right","loader","Home","visibleCreateMachine","machines","setSearch","buttonDisabled","setButtonDisabled","handleClickDisableButton","useEffect","handleOnChangeSearch","disabled","container","spacing","size","autoHideDuration","severity","children","useStyles","navbar","App","Toolbar","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1db12bab.chunk.js","sourcesContent":["import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport {useHomeStyles} from '../pages/Home';\nimport {IMachineErrors} from '../interfaces';\n\ninterface ErrorFormInterface {\n  classes: ReturnType<typeof useHomeStyles>;\n  errorState: IMachineErrors;\n  changeErrorState: (e?: React.ChangeEvent) => void;\n  handleClickAddError: () => void;\n}\n\nconst ErrorForm: React.FC<ErrorFormInterface> = ({classes, errorState, changeErrorState, handleClickAddError}: ErrorFormInterface): React.ReactElement => {\n\n  return (\n      <>\n        <TextField\n            margin=\"dense\"\n            label=\"Код ошибки\"\n            type=\"text\"\n            name=\"code\"\n            value={errorState.code}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>): void => {\n              changeErrorState(e);\n            }}\n            className={classes.errorCodeInput}\n        />\n        <TextField\n            margin=\"dense\"\n            label=\"Текст ошибки\"\n            type=\"text\"\n            name=\"errorText\"\n            value={errorState.errorText}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>): void => {\n              changeErrorState(e);\n            }}\n            className={classes.errorTextInput}\n        />\n        <span className={classes.formBtn}>\n        <Button variant={'contained'}\n                color={'primary'}\n                style={{margin: '15px 10px'}}\n                onClick={handleClickAddError}\n        >\n          Добавить\n        </Button>\n        </span>\n      </>\n  );\n};\n\nexport default ErrorForm;\n","import {\n  DashboardActionTypes,\n  ERROR,\n  FAILED,\n  FINISH_LOADING, HIDE_ERROR, HIDE_SUCCESS,\n  START_LOADING, SUCCESS,\n} from './actionTypes';\n\nexport const showErrorAlert = (message: string): DashboardActionTypes => ({\n  type: ERROR,\n  payload: message,\n});\n\nexport const hideErrorAlert = (message: string = ''): DashboardActionTypes => ({\n  type: HIDE_ERROR,\n  payload: message,\n});\n\nexport const showFailedAlert = (message: string): DashboardActionTypes => ({\n  type: FAILED,\n  payload: message,\n});\n\nexport const hideFailedAlert = (message: string = ''): DashboardActionTypes => ({\n  type: ERROR,\n  payload: message,\n});\n\nexport const showSuccessAlert = (message: string): DashboardActionTypes => ({\n  type: SUCCESS,\n  payload: message,\n});\n\nexport const hideSuccessAlert = (message: string = ''): DashboardActionTypes => ({\n  type: HIDE_SUCCESS,\n  payload: message,\n});\n\nexport const startLoading = (): DashboardActionTypes => ({\n  type: START_LOADING,\n  isLoading: true,\n});\n\nexport const finishLoading = (): DashboardActionTypes => ({\n  type: FINISH_LOADING,\n  isLoading: false,\n});\n","export const ERROR = 'ERROR';\nexport const HIDE_ERROR = 'HIDE_ERROR';\nexport const FAILED = 'FAILED';\nexport const HIDE_FAILED = 'HIDE_FAILED';\nexport const SUCCESS = 'SUCCESS';\nexport const HIDE_SUCCESS = 'HIDE_SUCCESS';\nexport const START_LOADING = 'START_LOADING';\nexport const FINISH_LOADING = 'FINISH_LOADING';\n\ninterface ErrorAction {\n  type: typeof ERROR;\n  payload: string;\n}\n\ninterface FailedAction {\n  type: typeof FAILED;\n  payload: string;\n}\n\ninterface ErrorHideAction {\n  type: typeof HIDE_ERROR,\n  payload: string\n}\n\ninterface FailedHideAction {\n  type: typeof HIDE_FAILED,\n  payload: string\n}\n\ninterface StartLoadingAction {\n  type: typeof START_LOADING;\n  isLoading: boolean;\n}\n\ninterface FinishLoadingAction {\n  type: typeof FINISH_LOADING;\n  isLoading: boolean\n}\n\ninterface SuccessAction {\n  type: typeof SUCCESS,\n  payload: string,\n}\n\ninterface HideSuccessAction {\n  type: typeof HIDE_SUCCESS,\n  payload: string\n}\n\nexport type DashboardActionTypes =\n    ErrorAction\n    | FailedAction\n    | StartLoadingAction\n    | FinishLoadingAction\n    | ErrorHideAction\n    | FailedHideAction\n    | SuccessAction\n    | HideSuccessAction\n\n","import {\n  IMachineErrors,\n  IWashingMachine,\n  UpdateStatusInterface,\n} from '../../interfaces';\nimport {\n  CREATE_MACHINE,\n  DELETE_MACHINE,\n  DELETE_MACHINES_BY_MODEL,\n  GET_ALL_MACHINES,\n  GET_MACHINES_BY_STATUS, SEARCH,\n  UPDATE_MACHINE,\n  UPDATE_MACHINE_ERROR_LIST,\n  UPDATE_MACHINE_STATUS,\n  WashingMachineActionTypes,\n} from './actionTypes';\n\nexport const getAllMachines = (machines: IWashingMachine[]): WashingMachineActionTypes => {\n  return ({\n    type: GET_ALL_MACHINES,\n    payload: machines\n  });\n}\n\nexport const getMachinesByStatus = (machines: IWashingMachine[]): WashingMachineActionTypes => ({\n  type: GET_MACHINES_BY_STATUS,\n  payload: machines,\n});\n\nexport const createNewMachine = (machine: IWashingMachine): WashingMachineActionTypes => ({\n  type: CREATE_MACHINE,\n  payload: machine,\n});\n\nexport const deleteMachine = (serialNumber: number): WashingMachineActionTypes => ({\n  type: DELETE_MACHINE,\n  serialNumber,\n});\n\nexport const deleteMachinesByModel = (model: string): WashingMachineActionTypes => ({\n  type: DELETE_MACHINES_BY_MODEL,\n  model,\n});\n\nexport const updateMachine = (machine: IWashingMachine): WashingMachineActionTypes => ({\n  type: UPDATE_MACHINE,\n  payload: machine,\n});\n\nexport const updateMachineStatus = (status: UpdateStatusInterface): WashingMachineActionTypes => ({\n  type: UPDATE_MACHINE_STATUS,\n  data: status,\n});\n\nexport const updateMachineErrorList = (errorState: IMachineErrors[], serialNumber: number): WashingMachineActionTypes => ({\n  type: UPDATE_MACHINE_ERROR_LIST,\n  data: {\n    errorState,\n    serialNumber\n  }\n})\n\nexport const searching = (input: string | undefined): WashingMachineActionTypes => ({\n  type: SEARCH,\n  input\n})\n","import {\n  IMachineErrors,\n  IWashingMachine,\n  UpdateStatusInterface,\n} from '../../interfaces';\n\nexport const GET_ALL_MACHINES = 'GET_ALL_MACHINES';\nexport const GET_MACHINES_BY_STATUS = 'GET_MACHINES_BY_STATUS';\nexport const CREATE_MACHINE = 'CREATE_MACHINE';\nexport const DELETE_MACHINE = 'DELETE_MACHINE';\nexport const DELETE_MACHINES_BY_MODEL = 'DELETE_MACHINES_BY_MODEL';\nexport const UPDATE_MACHINE = 'UPDATE_MACHINE';\nexport const UPDATE_MACHINE_STATUS = 'UPDATE_MACHINE_STATUS';\nexport const UPDATE_MACHINE_ERROR_LIST = 'UPDATE_MACHINE_ERROR_LIST';\nexport const SEARCH = 'SEARCH'\n\ninterface GetMachinesAction {\n  type: typeof GET_ALL_MACHINES\n  payload: IWashingMachine[]\n}\n\ninterface GetMachinesByStatusAction {\n  type: typeof GET_MACHINES_BY_STATUS;\n  payload: IWashingMachine[];\n}\n\ninterface CreateMachineAction {\n  type: typeof CREATE_MACHINE;\n  payload: IWashingMachine;\n}\n\ninterface DeleteMachineAction {\n  type: typeof DELETE_MACHINE;\n  serialNumber: number;\n}\n\ninterface DeleteMachinesByModelAction {\n  type: typeof DELETE_MACHINES_BY_MODEL;\n  model: string;\n}\n\ninterface UpdateMachineAction {\n  type: typeof UPDATE_MACHINE;\n  payload: IWashingMachine;\n}\n\ninterface UpdateMachineStatusAction {\n  type: typeof UPDATE_MACHINE_STATUS;\n  data: UpdateStatusInterface;\n}\n\ninterface UpdateMachineErrorListAction {\n  type: typeof UPDATE_MACHINE_ERROR_LIST;\n  data: {\n    errorState: IMachineErrors[];\n    serialNumber: number;\n  }\n}\n\ninterface SearchingAction {\n type: typeof SEARCH;\n input: string | undefined\n}\n\nexport type WashingMachineActionTypes =\n    GetMachinesAction\n    | GetMachinesByStatusAction\n    | CreateMachineAction\n    | DeleteMachinesByModelAction\n    | DeleteMachineAction\n    | UpdateMachineAction\n    | UpdateMachineStatusAction\n    | UpdateMachineErrorListAction\n|SearchingAction\n","import {Dispatch} from 'redux';\nimport {\n  showErrorAlert,\n  showFailedAlert, showSuccessAlert,\n} from '../redux/dashboard/actionCreators';\n\nconst checkStatus = (\n    status: string, dispatch: Dispatch, message: string\n): boolean => {\n  switch (status) {\n    case 'error':\n      dispatch(showErrorAlert(message));\n      return false;\n    case 'failed':\n      dispatch(showFailedAlert(message));\n      return false;\n    case 'success':\n      dispatch(showSuccessAlert(message));\n      return true;\n    default:\n      return true;\n  }\n\n};\n\nexport default checkStatus;\n","import {IMachineErrors, IWashingMachine} from '../../interfaces';\nimport {\n  createNewMachine,\n  deleteMachine,\n  deleteMachinesByModel,\n  getAllMachines,\n  getMachinesByStatus,\n  updateMachine,\n  updateMachineErrorList,\n  updateMachineStatus,\n} from './actionCreators';\nimport {Dispatch} from 'redux';\nimport {\n  finishLoading,\n  startLoading,\n} from '../dashboard/actionCreators';\nimport checkStatus from '../../utils/checkStatus';\n\nconst headers = {\n  'Content-Type': 'application/json',\n};\n\nexport const fetchCreateMachine = (body: IWashingMachine): Function => async (dispatch: Dispatch): Promise<void> => {\n  dispatch(startLoading());\n  const response = await fetch('/api/washingMachine', {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body),\n  });\n  const result = await response.json();\n  dispatch(finishLoading());\n  const status: boolean = checkStatus(\n      result.status,\n      dispatch,\n      result.message || 'Новая машина успешна добавлена!',\n  );\n  if (status) dispatch(createNewMachine(result.data));\n};\n\nexport const fetchAllMachines = (): Function => async (dispatch: Dispatch): Promise<void> => {\n  dispatch(startLoading());\n  const response = await fetch('/api/washingMachine');\n  const result = await response.json();\n  dispatch(finishLoading());\n  const status: boolean = checkStatus(\n      result.status,\n      dispatch,\n      result.message || 'Все машины получены!',\n  );\n  if (status) dispatch(getAllMachines(result.data));\n};\n\nexport const fetchDeleteMachine = (serialNumber: number): Function => async (dispatch: Dispatch): Promise<void> => {\n  const response = await fetch(`/api/washingMachine/${serialNumber}`, {\n    method: 'DELETE',\n    headers,\n  });\n  const result = await response.json();\n  const status = checkStatus(\n      result.status,\n      dispatch,\n      result.message ||\n      `Машина с серийным номером ${result.data} успешно удалена!`,\n  );\n  if (status) dispatch(deleteMachine(result.data));\n};\n\nexport const fetchDeleteMachinesByModel = (model: string): Function => async (dispatch: Dispatch): Promise<void> => {\n  const response = await fetch('/api/washingMachine/model', {\n    method: 'DELETE',\n    headers,\n    body: JSON.stringify({model}),\n  });\n  const result = await response.json();\n  const status = checkStatus(\n      result.status,\n      dispatch,\n      result.message || `Все машины по модели ${result.data} успешно удалены!`,\n  );\n\n  if (status) dispatch(deleteMachinesByModel(result.data));\n};\n\nexport const fetchUpdateMachine = (\n    updates: IWashingMachine,\n    currentSerialNumber: number\n): Function => async (dispatch: Dispatch): Promise<void> => {\n  const response = await fetch(`/api/washingMachine/${currentSerialNumber}`, {\n    method: 'PATCH',\n    headers,\n    body: JSON.stringify({updates}),\n  });\n  const result = await response.json();\n  const status = checkStatus(\n      result.status,\n      dispatch,\n      result.message ||\n      `Машина с ${result.data.serialNumber} успешно обновлена!`,\n  );\n  if (status) dispatch(updateMachine(result.data));\n};\n\nexport const fetchUpdateMachineStatus = (serialNumber: number): Function => async (dispatch: Dispatch): Promise<void> => {\n  const response = await fetch(`/api/washingMachine/status/${serialNumber}`, {\n    method: 'PATCH',\n    headers\n  })\n  const result = await response.json()\n  const status = checkStatus(\n      result.status,\n      dispatch,\n      result.message || `Машина ${result.data.status ? 'включена' : 'выключена'}`\n  )\n  if (status) dispatch(updateMachineStatus(result.data))\n}\n\nexport const fetchUpdateErrorList = (error: IMachineErrors, serialNumber: number): Function => async (dispatch: Dispatch): Promise<void> => {\n  const response = await fetch(`/api/washingMachine/errorList/${serialNumber}`, {\n    method: 'PATCH',\n    headers,\n    body: JSON.stringify({error})\n  })\n  const result = await response.json()\n  const status = checkStatus(\n      result.status,\n      dispatch,\n      result.message || 'Ошибка успешно добавлена!'\n  )\n\n  if (status) dispatch(updateMachineErrorList(result.data.errorList, result.data.serialNumber))\n}\n\nexport const fetchMachinesByStatus = (machineState: boolean): Function => async (dispatch: Dispatch): Promise<void> => {\n  const response = await fetch(`/api/washingMachine/status/${machineState}`)\n  const result = await response.json()\n  const status = checkStatus(\n      result.status,\n      dispatch,\n      result.message || `Показаны только ${machineState? 'включенные' : 'выключенные'} машины`\n  )\n\n  if (status) dispatch(getMachinesByStatus(result.data))\n}\n","import React from 'react';\nimport {v4 as uuidv4} from 'uuid';\n\nimport Dialog from '@material-ui/core/Dialog/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent/DialogContent';\nimport List from '@material-ui/core/List/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Paper from '@material-ui/core/Paper/Paper';\nimport CloseIcon from '@material-ui/icons/Close';\nimport {useHomeStyles} from '../pages/Home';\nimport IconButton from '@material-ui/core/IconButton/IconButton';\nimport {IMachineErrors} from '../interfaces';\nimport ErrorForm from './ErrorForm';\n\nimport {useErrorForm} from '../hooks/useErrorForm';\nimport {useDispatch} from 'react-redux';\nimport {showErrorAlert} from '../redux/dashboard/actionCreators';\nimport {fetchUpdateErrorList} from '../redux/washingMachines/thunksActionFunctions';\n\ninterface ModalBlockProps {\n  classes: ReturnType<typeof useHomeStyles>;\n  errors?: IMachineErrors[] | undefined;\n  serialNumber: number;\n  visible: boolean;\n  onClose: () => void;\n}\n\nconst ModalErrorBlock: React.FC<ModalBlockProps> = ({\n  classes,\n  errors,\n  serialNumber,\n  visible,\n  onClose,\n}: ModalBlockProps): React.ReactElement => {\n  const dispatch = useDispatch()\n  const [errorInputs, setErrorInputs] = useErrorForm({code: '', errorText: ''});\n\n  const handleClickAddError = (): void => {\n    if (errorInputs.code === '' || errorInputs.errorText === '') {\n      dispatch(showErrorAlert('Все поля должны быть заполнены!'))\n      return\n    }\n    dispatch(fetchUpdateErrorList(errorInputs, serialNumber))\n    setErrorInputs();\n  };\n\n  return (\n      <Dialog open={visible} onClose={onClose}\n              aria-labelledby=\"form-dialog-title\" fullWidth>\n        <DialogTitle id=\"form-dialog-title\" className={classes.dialogTitle}>\n          Серийный номер машины: {serialNumber}\n          <IconButton onClick={onClose}\n                      color=\"secondary\"\n                      aria-label=\"close\"\n          >\n            <CloseIcon style={{fontSize: 26}} color=\"primary\"/>\n          </IconButton>\n        </DialogTitle>\n        <DialogContent style={{margin: '0 auto', minWidth: '100%'}} dividers>\n          {errors && errors.length ?\n              <Paper className={classes.listOfErrors}>\n                <List>\n                  {errors.map((error: IMachineErrors) => {\n                    const key = uuidv4();\n                    return (\n                        <ListItem key={key}>\n                          <ListItemText><b>Код ошибки: {error.code}</b> || Текст\n                            ошибки: {error.errorText}</ListItemText>\n                        </ListItem>\n                    );\n                  })}\n                </List>\n              </Paper> :\n              <h2>Ошибки отсутствуют</h2>\n          }\n          <h4 style={{marginBottom: 0}}>Добавить ошибку</h4>\n          <ErrorForm classes={classes}\n                     changeErrorState={setErrorInputs}\n                     errorState={errorInputs}\n                     handleClickAddError={handleClickAddError}\n          />\n        </DialogContent>\n      </Dialog>\n  );\n};\n\nexport default ModalErrorBlock;\n","import React from 'react';\nimport {IMachineErrors} from '../interfaces';\n\nexport const useErrorForm = (initialState: IMachineErrors): [IMachineErrors, (e?: React.ChangeEvent) => void] => {\n  const [state, setState] = React.useState<IMachineErrors>(initialState)\n  const changeState = (e?: React.ChangeEvent):void => {\n    if (!e) {\n      setState({code: '', errorText: ''})\n      return\n    }\n   const element: HTMLInputElement = e.target as HTMLInputElement\n   const value: string = element.value\n   const name: string = element.name\n   setState({...state, [name]: value})\n  }\n\n  return [state, changeState]\n};\n","import React from 'react';\n\nimport TextField from '@material-ui/core/TextField/TextField';\n\nimport { MainFormInterface } from '../interfaces';\n\n\nconst EditForm: React.FC<MainFormInterface> = ({dataState, changeDataState, validation}: MainFormInterface): React.ReactElement => {\n\n  return (\n      <>\n        <TextField\n            margin=\"dense\"\n            label=\"Модель\"\n            name=\"model\"\n            type=\"text\"\n            fullWidth\n            value={dataState.model}\n            onChange={changeDataState}\n        />\n        <TextField\n            margin=\"dense\"\n            label=\"Серийный номер\"\n            type=\"text\"\n            name=\"serialNumber\"\n            fullWidth\n            error={Boolean(validation)}\n            helperText={validation}\n            value={dataState.serialNumber}\n            onChange={changeDataState}\n        />\n        <TextField\n            margin=\"dense\"\n            label=\"Циклов работы\"\n            type=\"text\"\n            name=\"washingCycles\"\n            fullWidth\n            value={dataState.washingCycles}\n            onChange={changeDataState}\n        />\n        <TextField\n            id=\"date\"\n            label=\"Дата производства\"\n            type=\"date\"\n            name=\"dateOfManufacture\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n            value={dataState.dateOfManufacture}\n            onChange={changeDataState}\n        />\n      </>\n  );\n};\n\nexport default EditForm;\n","import React from 'react';\nimport {MainFormStateInterface} from '../interfaces';\nimport {convertDate} from '../utils/dateConverter';\n\nexport const useMainForm = (\n    initialState: MainFormStateInterface\n): [MainFormStateInterface, (e?: React.ChangeEvent) => void] => {\n  initialState = {\n    ...initialState,\n    'dateOfManufacture': convertDate(initialState.dateOfManufacture\n    ),\n  };\n  const [state, setState] = React.useState<MainFormStateInterface>(\n      initialState\n  );\n\n  const changeState = (e?: React.ChangeEvent): void => {\n    if (!e) {\n      setState(initialState)\n    } else {\n      const element = e.target as HTMLInputElement;\n      const name: string = element.name;\n      let value: string | boolean | number;\n      switch (name) {\n        case 'status':\n          value = element.value === 'true';\n          break;\n        case 'serialNumber':\n        case 'washingCycles':\n          value = +element.value;\n          break;\n        default:\n          value = element.value;\n          break;\n      }\n    setState({...state, [name]: value});\n    }\n  };\n  return [state, changeState];\n};\n","export const convertDate = (date: string): string => {\n  if (date.includes('.')) {\n    return date.split('.').reverse().join('-')\n  }\n  return date\n};\n\n\nexport const convertDateReverse = (date: string): string => {\n  if (!date.includes('.')) {\n   return date.split('-').reverse().join('.')\n  }\n  return date\n}\n","import React from 'react';\nimport {useHomeStyles} from '../pages/Home';\nimport Dialog from '@material-ui/core/Dialog/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle/DialogTitle';\nimport DialogActions from '@material-ui/core/DialogActions/DialogActions';\nimport IconButton from '@material-ui/core/IconButton/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport {Button} from '@material-ui/core';\nimport {\n  fetchDeleteMachine,\n  fetchDeleteMachinesByModel,\n} from '../redux/washingMachines/thunksActionFunctions';\nimport {useDispatch} from 'react-redux';\n\ninterface ModalDeleteBlockProps {\n  classes: ReturnType<typeof useHomeStyles>\n  visible: boolean,\n  serialNumber: number,\n  model: string\n  onClose: () => void\n}\n\nconst ModalDeleteBlock: React.FC<ModalDeleteBlockProps> = ({\n  classes,\n  onClose,\n  visible,\n  serialNumber,\n  model,\n}: ModalDeleteBlockProps): React.ReactElement => {\n  const dispatch = useDispatch();\n  const handleClickDeleteBySerialNumber = (): void => {\n    dispatch(fetchDeleteMachine(serialNumber));\n    onClose();\n  };\n\n  const handleClickDeleteByModel = (): void => {\n    dispatch(fetchDeleteMachinesByModel(model))\n    onClose();\n  };\n  return (\n      <>\n        <Dialog open={visible} onClose={onClose}\n                aria-labelledby=\"form-dialog-title\" fullWidth>\n          <DialogTitle id=\"form-dialog-title\" className={classes.dialogTitle}>\n            Серийный номер машины: {serialNumber}\n            <IconButton onClick={onClose}\n                        color=\"secondary\"\n                        aria-label=\"close\"\n            >\n              <CloseIcon style={{fontSize: 26}} color=\"primary\"/>\n            </IconButton>\n          </DialogTitle>\n          <DialogActions>\n            <Button onClick={handleClickDeleteBySerialNumber}\n                    variant={'contained'}\n                    color={'primary'}\n            >\n              Удалить машину с серийным номером: {serialNumber}\n            </Button>\n            <Button onClick={handleClickDeleteByModel}\n                    variant={'contained'}\n                    color={'primary'}\n            >\n              Удалить все машины с моделью: {model}\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </>\n  );\n};\n\nexport default ModalDeleteBlock;\n","import {IWashingMachine} from '../../interfaces';\nimport {\n  WashingMachineActionTypes,\n} from './actionTypes';\n\nexport interface WashingMachineState {\n  washingMachines: IWashingMachine[];\n  searchingMachines: IWashingMachine[];\n}\n\nconst initialState: WashingMachineState = {\n  washingMachines: [],\n  searchingMachines: [],\n};\n\nexport const washingMachineReducer = (\n    state: WashingMachineState = initialState,\n    action: WashingMachineActionTypes): WashingMachineState => {\n  switch (action.type) {\n    case 'GET_ALL_MACHINES':\n      return {\n        ...state,\n        washingMachines: [...action.payload],\n      };\n    case 'GET_MACHINES_BY_STATUS':\n      return {\n        ...state,\n        washingMachines: [...action.payload],\n      };\n    case 'CREATE_MACHINE':\n      return {\n        ...state,\n        washingMachines: [...state.washingMachines, action.payload],\n      };\n    case 'DELETE_MACHINE':\n      return {\n        ...state,\n        washingMachines: state.washingMachines.filter(\n            machine => machine.serialNumber !== action.serialNumber,\n        ),\n      };\n    case 'DELETE_MACHINES_BY_MODEL':\n      return {\n        ...state,\n        washingMachines: state.washingMachines.filter(\n            machine => machine.model !== action.model,\n        ),\n      };\n    case 'UPDATE_MACHINE':\n      return {\n        ...state,\n        washingMachines: state.washingMachines.map(\n            machine => machine._id === action.payload._id\n                ? action.payload\n                : machine,\n        ),\n      };\n    case 'UPDATE_MACHINE_STATUS':\n      return {\n        ...state,\n        washingMachines: state.washingMachines.map(\n            machine => {\n              machine.status = machine.serialNumber === action.data.serialNumber\n                  ? action.data.status\n                  : machine.status;\n              return machine;\n            },\n        ),\n      };\n    case 'UPDATE_MACHINE_ERROR_LIST':\n      return {\n        ...state,\n        washingMachines: state.washingMachines.map(\n            machine => {\n              if (machine.serialNumber === action.data.serialNumber) {\n                machine.historyOfErrors?.push(...action.data.errorState);\n              }\n              return machine;\n            },\n        ),\n      };\n    case 'SEARCH':\n      const regex = new RegExp(action.input || '', 'g')\n      return {\n        ...state,\n        searchingMachines: action.input ? state.washingMachines.filter(\n            machine => +(machine.serialNumber.toString().search(regex)) + 1\n        ) : []\n      };\n    default:\n      return state;\n  }\n};\n\nexport default washingMachineReducer;\n","import {DashboardActionTypes} from './actionTypes';\n\nexport interface DashboardState {\n  error: string,\n  failed: string,\n  success: string,\n  loading: boolean\n}\n\nconst initialState: DashboardState = {\n  error: '',\n  failed: '',\n  success: '',\n  loading: false\n}\n\n\nconst dashboardReducer = (state: DashboardState = initialState, action: DashboardActionTypes): DashboardState => {\n  switch (action.type){\n    case 'ERROR':\n      return {\n        ...state,\n        error: action.payload\n      }\n    case 'FAILED':\n      return {\n        ...state,\n        failed: action.payload\n      }\n    case 'HIDE_ERROR':\n      return {\n        ...state,\n        error: action.payload\n      }\n    case 'HIDE_FAILED':\n      return {\n        ...state,\n        failed: action.payload\n      }\n    case 'SUCCESS':\n      return {\n        ...state,\n        success: action.payload\n      }\n    case 'HIDE_SUCCESS':\n      return {\n        ...state,\n        success: action.payload\n      }\n    case 'START_LOADING':\n      return {\n        ...state,\n        loading: action.isLoading\n      }\n    case 'FINISH_LOADING':\n      return {\n        ...state,\n        loading: action.isLoading\n      }\n    default:\n      return state\n  }\n}\n\nexport default dashboardReducer\n","import {combineReducers} from 'redux';\nimport washingMachineReducer from './washingMachines/reducer';\nimport dashboardReducer from './dashboard/reducer';\n\nconst rootReducer = combineReducers({\n  washingMachine: washingMachineReducer,\n  dashboard: dashboardReducer\n})\n\nexport default rootReducer\n","import {createStore, compose, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './rootReducer';\nimport {WashingMachineState} from './washingMachines/reducer';\nimport {TypedUseSelectorHook, useSelector} from 'react-redux';\nimport {DashboardState} from './dashboard/reducer';\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\n\nconst composeEnhancers =\n    (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\nexport interface RootState {\n  washingMachine: WashingMachineState,\n  dashboard: DashboardState,\n}\n\nexport const typedUseSelector: TypedUseSelectorHook<RootState> = useSelector;\n\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))\n","import {WashingMachineState} from '../redux/washingMachines/reducer';\nimport {store} from '../redux/store';\nimport {IWashingMachine, MainFormStateInterface} from '../interfaces';\n\nconst validation = (machineCandidate: MainFormStateInterface): { status: boolean; message?: string } => {\n  const state: WashingMachineState = store.getState().washingMachine;\n  const checkSerialNumber = state.washingMachines.find(\n      (machine: IWashingMachine) => machine.serialNumber === machineCandidate.serialNumber\n  );\n  if (checkSerialNumber) {\n    return {\n      message: 'Данный серийный номер уже существует',\n      status: false\n    }\n  }\n\n  return {\n    status: true\n  }\n};\n\nexport default validation;\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport Grid from '@material-ui/core/Grid/Grid';\n\nimport {IWashingMachine} from '../interfaces';\nimport Card from '@material-ui/core/Card/Card';\nimport CardMedia from '@material-ui/core/CardMedia/CardMedia';\nimport CardContent from '@material-ui/core/CardContent/CardContent';\nimport Typography from '@material-ui/core/Typography/Typography';\nimport CardActions from '@material-ui/core/CardActions/CardActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button/Button';\nimport WorkingIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport {useHomeStyles} from '../pages/Home';\nimport ModalErrorBlock from './ModalErrorBlock';\nimport EditForm from './EditForm';\nimport {useMainForm} from '../hooks/useMainForm';\nimport ModalDeleteBlock from './ModalDeleteBlock';\nimport {\n  fetchUpdateMachine,\n  fetchUpdateMachineStatus,\n} from '../redux/washingMachines/thunksActionFunctions';\nimport {useDispatch} from 'react-redux';\nimport validation from '../utils/validation';\nimport {showErrorAlert} from '../redux/dashboard/actionCreators';\n\ninterface DashboardCardProps {\n  data: IWashingMachine,\n  classes: ReturnType<typeof useHomeStyles>\n}\n\nconst DashboardCard: React.FC<DashboardCardProps> = ({data, classes}: DashboardCardProps): React.ReactElement => {\n  const dispatch = useDispatch();\n  const [visible, setVisible] = React.useState<'Error' | 'Delete'>();\n  const [editState, setEditState] = React.useState<boolean>(false);\n  const [validationError, setValidationError] = React.useState<string | undefined>();\n  const [editFormValues, setEditFormValues] = useMainForm({\n    model: data.model,\n    dateOfManufacture: data.dateOfManufacture,\n    serialNumber: data.serialNumber,\n    washingCycles: data.washingCycles,\n  });\n\n  const handleClickOpenModal = (value: string): void => {\n    if (value === 'Error') setVisible('Error');\n    else setVisible('Delete');\n  };\n\n  const handleClickCloseModal = (): void => {\n    setVisible(undefined);\n  };\n\n  const handleClickEditToggle = (): void => {\n    setEditState(prevSate => !prevSate);\n    if (editState) {\n      if (editFormValues.model === '' || editFormValues.dateOfManufacture === ''){\n        dispatch(showErrorAlert('Поля не заполнены!'))\n        setEditState(prevState => !prevState)\n        return\n      }\n      if (editFormValues.serialNumber !== data.serialNumber) {\n        const isValid = validation(editFormValues);\n        if (isValid.status) {\n          dispatch(fetchUpdateMachine(editFormValues, data.serialNumber));\n        } else {\n          setEditState(prevState => !prevState);\n          setValidationError(isValid.message);\n        }\n      } else {\n        dispatch(fetchUpdateMachine(editFormValues, data.serialNumber))\n      }\n    }\n  };\n\n  const handleClickChangeStatus = ():void => {\n    dispatch(fetchUpdateMachineStatus(data.serialNumber))\n  }\n\n  return (\n      <>\n        <Grid item xs={4}>\n          <Card variant={'outlined'} className={classes.card}>\n            <CardMedia\n                className={classes.media}\n                image=\"https://images.unsplash.com/photo-1551761429-8232f9f5955c?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1818&q=80\"\n            />\n            <CardContent style={{position: 'relative'}}>\n              <IconButton className={classes.editBtn}\n                          onClick={handleClickEditToggle}\n              >\n                <EditIcon color={'primary'}/>\n              </IconButton>\n              {editState ?\n                  <>\n                    <EditForm dataState={editFormValues}\n                              changeDataState={setEditFormValues}\n                              validation={validationError}\n                    />\n                  </>\n                  :\n                  <>\n                    <IconButton className={classes.deleteBtn}\n                                onClick={() => handleClickOpenModal('Delete')}\n                    >\n                      <DeleteIcon color={'primary'}/>\n                    </IconButton>\n                    <Typography component={'div'} className={classes.model}>\n                      <h2 className={classes.modelText}>Модель: {data.model}</h2>\n                    </Typography>\n                    <Typography component={'div'}>\n                      <p className={classes.primaryField}>Серийный номер\n                        : {data.serialNumber}</p>\n                    </Typography>\n                    <Typography component={'div'}>\n                      <p className={classes.primaryField}>Циклов работы\n                        : {data.washingCycles}</p>\n                    </Typography>\n                    <Typography component={'div'}>\n                      <p className={classNames(classes.primaryField,\n                          classes.statusField)}>\n                        <span>Состояние:</span>{data.status ?\n                          <span className={classes.statusState}>\n                      <WorkingIcon className={classes.statusWorking}/>\n                      Работает\n                    </span> :\n                          <span className={classes.statusState}>\n                      <ErrorIcon className={classes.statusError}/>\n                      Не работает\n                    </span>\n                      }\n                      </p>\n                    </Typography>\n                    <Typography component={'div'} variant={'subtitle2'}>\n                      <p>Дата производства\n                        : {data.dateOfManufacture}</p>\n                    </Typography>\n                  </>\n              }\n            </CardContent>\n            {editState ? null :\n                <CardActions className={classes.bottomBtns}>\n              <span className={data.status\n                  ? classes.statusWorking\n                  : classes.statusError}>\n              <Button className={classes.changeStatusBtn}\n                      variant={'contained'}\n                onClick={handleClickChangeStatus}\n              >\n              <span>{data.status ? 'Выключить' : 'Включить'}</span>\n              </Button>\n              </span>\n                  <Button color={'primary'} variant={'contained'}\n                          onClick={() => handleClickOpenModal('Error')}>\n                    История ошибок\n                  </Button>\n                </CardActions>\n            }\n          </Card>\n        </Grid>\n        <ModalErrorBlock classes={classes}\n                         errors={data.historyOfErrors}\n                         onClose={handleClickCloseModal}\n                         visible={visible === 'Error'}\n                         serialNumber={data.serialNumber}\n        />\n        <ModalDeleteBlock classes={classes}\n                          visible={visible === 'Delete'}\n                          serialNumber={data.serialNumber}\n                          model={data.model}\n                          onClose={handleClickCloseModal}/>\n      </>\n  );\n};\n\nexport default DashboardCard;\n","import React from 'react';\nimport TextField from '@material-ui/core/TextField/TextField';\nimport FormControl from '@material-ui/core/FormControl/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nimport {MainFormInterface} from '../interfaces';\n\n\nconst AddForm: React.FC<MainFormInterface> = ({dataState, changeDataState, validation}:MainFormInterface): React.ReactElement => {\n\n  return (\n      <>\n        <TextField\n            margin=\"dense\"\n            label=\"Модель\"\n            name=\"model\"\n            type=\"text\"\n            fullWidth\n            error={!Boolean(dataState.model)}\n            helperText={Boolean(dataState.model) ? '' : 'Поле должно быть' +\n                ' заполнено'}\n            value={dataState.model}\n            onChange={changeDataState}\n        />\n        <TextField\n            margin=\"dense\"\n            label=\"Серийный номер\"\n            name=\"serialNumber\"\n            type=\"text\"\n            fullWidth\n            error={Boolean(validation) || !Boolean(dataState.serialNumber)}\n            helperText={Boolean(validation) ? validation : 'Поле должно быть' +\n                ' заполнено'}\n            value={isNaN(dataState.serialNumber) ? '' : dataState.serialNumber}\n            onChange={changeDataState}\n        />\n        <TextField\n            margin=\"dense\"\n            label=\"Циклов работы\"\n            placeholder={'Необязательное поле'}\n            name=\"washingCycles\"\n            type=\"text\"\n            fullWidth\n            value={dataState?.washingCycles?.toString() && isNaN(dataState.washingCycles) ? '' : dataState.washingCycles}\n            onChange={changeDataState}\n        />\n        <FormControl component=\"fieldset\" style={{marginTop: 10}}>\n          <FormLabel component=\"legend\">Статус</FormLabel>\n          <RadioGroup aria-label=\"gender\" name=\"status\" value={dataState.status} onChange={changeDataState}>\n            <FormControlLabel value={true} control={<Radio />} label=\"Включена\" />\n            <FormControlLabel value={false} control={<Radio />} label=\"Выключена\" />\n          </RadioGroup>\n        </FormControl>\n\n        <TextField\n            id=\"date\"\n            label=\"Дата производства\"\n            type=\"date\"\n            name=\"dateOfManufacture\"\n            error={!Boolean(dataState.dateOfManufacture)}\n            helperText={Boolean(dataState.dateOfManufacture) ? '' : 'Поле должно быть' +\n                ' заполнено'}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            fullWidth\n            value={dataState.dateOfManufacture}\n            onChange={changeDataState}\n        />\n      </>\n  );\n};\n\nexport default AddForm;\n","import React from 'react';\n\nimport Dialog from '@material-ui/core/Dialog/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport AddForm from './AddForm';\n\nimport {useHomeStyles} from '../pages/Home';\nimport {useMainForm} from '../hooks/useMainForm';\nimport {convertDateReverse} from '../utils/dateConverter';\nimport validation from '../utils/validation';\nimport {useDispatch} from 'react-redux';\nimport {fetchCreateMachine} from '../redux/washingMachines/thunksActionFunctions';\nimport {IWashingMachine} from '../interfaces';\nimport {showErrorAlert} from '../redux/dashboard/actionCreators';\n\ninterface ModalAddBlockProps {\n  classes: ReturnType<typeof useHomeStyles>;\n  visible: boolean;\n  onClose: () => void;\n}\n\nconst ModalAddBlock: React.FC<ModalAddBlockProps> = ({\n  classes,\n  visible,\n  onClose,\n}: ModalAddBlockProps): React.ReactElement => {\n  const initialState: IWashingMachine = {\n    model: '',\n    serialNumber: NaN,\n    dateOfManufacture: '',\n    status: true,\n    washingCycles: NaN\n  }\n  const dispatch = useDispatch()\n  const [dataState, setDataState] = useMainForm(initialState)\n  const [validationSerialNumber, setValidationSerialNumber] = React.useState<string | undefined>()\n\n  const handleClickAddMachine = (): void => {\n    const date = convertDateReverse(dataState.dateOfManufacture)\n    const isValid = validation(dataState)\n    if (!isValid.status) {\n      setValidationSerialNumber(isValid.message)\n      return\n    }\n    if (validationSerialNumber) {\n      setValidationSerialNumber(undefined)\n    }\n\n    if (dataState.model === '' || dataState.dateOfManufacture === '') {\n      dispatch(showErrorAlert('Не все поля заполнены!'))\n      return\n    }\n\n    dispatch(fetchCreateMachine({...dataState, dateOfManufacture: date}))\n    setDataState()\n    onClose()\n  }\n  return (\n      <>\n        <Dialog open={visible}\n                onClose={onClose}\n                aria-labelledby=\"form-dialog-title\"\n                fullWidth\n        >\n          <DialogTitle className={classes.dialogTitle}>\n            Добавить машину\n            <IconButton onClick={() => {\n              onClose()\n              setDataState()\n            }}\n                        color=\"secondary\"\n                        aria-label=\"close\"\n            >\n              <CloseIcon style={{fontSize: 26}} color=\"primary\"/>\n            </IconButton>\n          </DialogTitle>\n          <DialogContent>\n            <AddForm dataState={dataState} changeDataState={setDataState} validation={validationSerialNumber}/>\n          </DialogContent>\n          <DialogActions>\n            <Button variant={'contained'} color={'primary'} onClick={handleClickAddMachine}>\n              Добавить\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </>\n  );\n};\n\nexport default ModalAddBlock;\n","import React, {useEffect} from 'react';\n\nimport Grid from '@material-ui/core/Grid/Grid';\nimport DashboardCard from '../components/DashboardCard';\nimport Container from '@material-ui/core/Container/Container';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport CircularProgress\n  from '@material-ui/core/CircularProgress/CircularProgress';\nimport Snackbar from '@material-ui/core/Snackbar/Snackbar';\nimport Alert from '@material-ui/lab/Alert/Alert';\nimport TextField from '@material-ui/core/TextField/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport ModalAddBlock from '../components/ModalAddBlock';\n\nimport {IWashingMachine} from '../interfaces';\nimport {typedUseSelector} from '../redux/store';\nimport {useDispatch} from 'react-redux';\nimport {\n  fetchAllMachines,\n  fetchMachinesByStatus,\n} from '../redux/washingMachines/thunksActionFunctions';\nimport {searching} from '../redux/washingMachines/actionCreators';\nimport {\n  hideErrorAlert,\n  hideFailedAlert,\n  hideSuccessAlert,\n} from '../redux/dashboard/actionCreators';\n\nexport const useHomeStyles = makeStyles(() => ({\n  media: {\n    height: 100,\n    paddingTop: 10,\n  },\n\n  card: {\n    position: 'relative',\n    minHeight: 393,\n  },\n\n  model: {\n    position: 'absolute',\n    color: '#fff',\n    top: -100,\n    left: 0,\n    textAlign: 'center',\n    width: '100%',\n  },\n\n  modelText: {\n    textShadow: '2px 2px 2px #000000',\n    fontWeight: 900,\n    fontSize: 30,\n  },\n\n  primaryField: {\n    fontSize: 18,\n    fontWeight: 700,\n  },\n\n  statusField: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n  },\n\n  statusState: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n    alignItems: 'center',\n    marginLeft: 10,\n    '& svg': {\n      marginRight: 4,\n    },\n  },\n\n  statusWorking: {\n    color: '#34b830',\n    '& button': {\n      backgroundColor: '#34b830',\n      color: '#fff',\n    },\n    '& button:hover': {\n      backgroundColor: '#1c7319',\n    },\n  },\n\n  statusError: {\n    color: '#ff0808',\n    '& button': {\n      backgroundColor: '#ff0808',\n      color: '#fff',\n    },\n\n    '& button:hover': {\n      backgroundColor: '#b51b1b',\n    },\n  },\n\n  changeStatusBtn: {\n    width: 120,\n    textAlign: 'center',\n  },\n\n  bottomBtns: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    margin: '10px 5px',\n  },\n\n  dialogTitle: {\n    '& h2': {\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n    },\n  },\n\n  listOfErrors: {\n    maxHeight: 200,\n    overflow: 'auto',\n  },\n\n  errorCodeInput: {\n    marginRight: '5%',\n    width: '40%',\n  },\n\n  errorTextInput: {\n    width: '55%',\n  },\n\n  formBtn: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n\n  editBtn: {\n    position: 'absolute',\n    right: 0,\n    top: 0,\n  },\n\n  deleteBtn: {\n    position: 'absolute',\n    right: 40,\n    top: 0,\n  },\n\n  loader: {\n    width: '100%',\n    height: '100vh',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n\n  searching: {\n    width: 300,\n  },\n\n  filter: {\n    width: 200,\n  },\n}));\n\ninterface HomeInterface {\n  visibleCreateMachine: boolean\n  onClose: () => void\n}\n\nconst Home: React.FC<HomeInterface> = ({visibleCreateMachine, onClose}: HomeInterface): React.ReactElement => {\n  const classes = useHomeStyles();\n  const dispatch = useDispatch();\n  const isLoading = typedUseSelector(state => state.dashboard.loading);\n  const error = typedUseSelector(state => state.dashboard.error);\n  const failed = typedUseSelector(state => state.dashboard.failed);\n  const success = typedUseSelector(state => state.dashboard.success);\n  const machines = typedUseSelector(\n      state => state.washingMachine.washingMachines);\n  const searchingMachines = typedUseSelector(\n      state => state.washingMachine.searchingMachines);\n  const [search, setSearch] = React.useState<string>('');\n  const [buttonDisabled, setButtonDisabled] = React.useState<string>('all');\n  const handleOnChangeSearch = (e: React.ChangeEvent) => {\n    const element = e.target as HTMLInputElement;\n    setSearch(() => {\n      if (element.value) {\n        dispatch(searching(element.value));\n      } else {\n        dispatch(searching(undefined));\n      }\n      return element.value;\n    });\n  };\n  const handleClickDisableButton = (type: string) => {\n    setButtonDisabled(type);\n  };\n\n  const checkSearching = () => {\n    return searchingMachines.length\n        ? searchingMachines.map(\n            (machine: IWashingMachine) => <DashboardCard key={machine._id}\n                                                         data={machine}\n                                                         classes={classes}/>,\n        )\n        : machines.map(\n            (machine: IWashingMachine) => <DashboardCard key={machine._id}\n                                                         data={machine}\n                                                         classes={classes}/>,\n        );\n  };\n  useEffect(() => {\n    dispatch(fetchAllMachines());\n  }, [dispatch]);\n\n  return (\n      <>\n        <Container>\n          <Container>\n            <TextField className={classes.searching}\n                       margin=\"dense\"\n                       label=\"Поиск по серийному номеру\"\n                       type=\"text\"\n                       value={search}\n                       onChange={(e: React.ChangeEvent) => handleOnChangeSearch(\n                           e)}\n            />\n            <Button variant=\"contained\"\n                    disabled={buttonDisabled === 'all'}\n                    color=\"primary\"\n                    style={{marginRight: 10, marginTop: 20, marginLeft: 20}}\n                    onClick={() => {\n                      handleClickDisableButton('all');\n                      dispatch(fetchAllMachines());\n                    }}>\n              Показать все машины\n            </Button>\n            <Button variant=\"contained\"\n                    disabled={buttonDisabled === 'allOn'}\n                    color=\"primary\"\n                    style={{marginRight: 10, marginTop: 20}}\n                    onClick={() => {\n                      handleClickDisableButton('allOn');\n                      dispatch(fetchMachinesByStatus(true));\n                    }}>\n              Показать все включенные\n            </Button>\n            <Button variant=\"contained\"\n                    disabled={buttonDisabled === 'allOff'}\n                    color=\"primary\"\n                    style={{marginRight: 10, marginTop: 20}}\n                    onClick={() => {\n                      handleClickDisableButton('allOff');\n                      dispatch(fetchMachinesByStatus(false));\n                    }}>\n              Показать все выключенные\n            </Button>\n          </Container>\n          <Grid container spacing={4} style={{marginTop: 10}}>\n            {!isLoading ?\n                checkSearching()\n                :\n                <div className={classes.loader}>\n                  <CircularProgress size={200}/>\n                </div>\n            }\n          </Grid>\n        </Container>\n        <ModalAddBlock classes={classes}\n                       visible={visibleCreateMachine}\n                       onClose={onClose}\n        />\n        <Snackbar open={Boolean(error)}\n                  autoHideDuration={6000}\n                  onClose={() => dispatch(hideErrorAlert())}\n        >\n          <Alert onClose={() => dispatch(hideErrorAlert())}\n                 severity=\"error\"\n                 children={error}\n          />\n\n        </Snackbar>\n        <Snackbar open={Boolean(failed)}\n                  autoHideDuration={4000}\n                  onClose={() => dispatch(hideFailedAlert())}\n        >\n          <Alert onClose={() => dispatch(hideFailedAlert())}\n                 severity=\"warning\"\n                 children={failed}\n          />\n        </Snackbar>\n        <Snackbar open={Boolean(success)}\n                  autoHideDuration={3000}\n                  onClose={() => dispatch(hideSuccessAlert())}\n        >\n          <Alert onClose={() => dispatch(hideSuccessAlert())}\n                 severity=\"success\"\n                 children={success}\n          />\n        </Snackbar>\n      </>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport Home from './pages/Home';\nimport AppBar from '@material-ui/core/AppBar/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport {makeStyles} from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() => ({\n  navbar: {\n    display: 'flex',\n    justifyContent: 'space-between'\n  }\n}))\n\nfunction App() {\n  const classes = useStyles()\n  const [visible, setVisible] = React.useState<boolean>(false)\n\n  const handleClickOpenModal = ():void => {\n    setVisible(true)\n  }\n\n  const handleClickCloseModal = ():void => {\n    setVisible(false)\n  }\n  return (\n      <div style={{height: \"100vh\"}}>\n          <AppBar position=\"static\" color={'primary'}>\n            <Toolbar className={classes.navbar}>\n              <Typography variant=\"h6\">\n                Dashboard\n              </Typography>\n              <Button color=\"inherit\"\n                      onClick={handleClickOpenModal}\n              >\n                Добавить стиральную машину\n              </Button>\n            </Toolbar>\n          </AppBar>\n        <Home visibleCreateMachine={visible} onClose={handleClickCloseModal}/>\n      </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport {store} from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n      <App/>\n    </Provider>,\n    document.getElementById('root'),\n);\n\n"],"sourceRoot":""}